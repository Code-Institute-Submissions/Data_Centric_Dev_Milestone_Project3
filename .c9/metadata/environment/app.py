{"filter":false,"title":"app.py","tooltip":"/app.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":83,"column":4},"end":{"row":83,"column":56},"action":"remove","lines":["\"\"\"Check if user is logged-in on every page load.\"\"\""],"id":3511}],[{"start":{"row":82,"column":24},"end":{"row":83,"column":4},"action":"remove","lines":["","    "],"id":3512}],[{"start":{"row":61,"column":57},"end":{"row":61,"column":63},"action":"insert","lines":["login_"],"id":3515}],[{"start":{"row":63,"column":62},"end":{"row":63,"column":68},"action":"insert","lines":["login_"],"id":3516}],[{"start":{"row":78,"column":60},"end":{"row":78,"column":66},"action":"insert","lines":["login_"],"id":3517}],[{"start":{"row":11,"column":41},"end":{"row":11,"column":81},"action":"remove","lines":["# flask wtf from form.py e.g. ReviewForm"],"id":3518}],[{"start":{"row":13,"column":24},"end":{"row":13,"column":30},"action":"remove","lines":["#12/02"],"id":3519}],[{"start":{"row":12,"column":95},"end":{"row":12,"column":101},"action":"remove","lines":["#12/02"],"id":3520}],[{"start":{"row":56,"column":27},"end":{"row":56,"column":39},"action":"remove","lines":["request.form"],"id":3521}],[{"start":{"row":46,"column":0},"end":{"row":46,"column":2},"action":"insert","lines":["\"\""],"id":3522}],[{"start":{"row":46,"column":2},"end":{"row":46,"column":3},"action":"insert","lines":["\""],"id":3523}],[{"start":{"row":89,"column":0},"end":{"row":89,"column":2},"action":"insert","lines":["\"\""],"id":3524}],[{"start":{"row":89,"column":2},"end":{"row":89,"column":3},"action":"insert","lines":["\""],"id":3525}],[{"start":{"row":89,"column":3},"end":{"row":90,"column":0},"action":"insert","lines":["",""],"id":3526}],[{"start":{"row":0,"column":0},"end":{"row":24,"column":67},"action":"remove","lines":["import os, datetime, math, re # re is regular extension","import json","from bson.json_util import dumps","from os import path","if path.exists(\"env.py\"):","    import env","#from dotenv import load_dotenv","from flask import Flask, render_template, redirect, request, url_for, session, flash, jsonify","from flask_pymongo import PyMongo, pymongo # for paginate functionality","from bson.objectid import ObjectId","from werkzeug.security import generate_password_hash, check_password_hash  ","from forms import CommentForm, LoginForm ","from flask_login import LoginManager, login_required, login_user, current_user, login_required ","from models import User ","from flask_wtf import csrf","","app = Flask(__name__) #dunder ","#app.config['MONGODB_NAME']= os.environ.get('MONGODB_NAME') ","app.config['MONGO_URI'] = os.environ.get('MONGO_URI')","app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY')","","","mongo = PyMongo(app)","login_manager = LoginManager(app) #initalise LM app not used  __init__.py #12/02","login_manager.login_view = 'login' #12/02 # can be used for loader "],"id":3532},{"start":{"row":0,"column":0},"end":{"row":20,"column":20},"action":"insert","lines":["import os, datetime, math, re # re is regular extension","import json","from bson.json_util import dumps","from os import path","if path.exists(\"env.py\"):","    import env","#from dotenv import load_dotenv","from flask import Flask, render_template, redirect, request, url_for, session, flash, jsonify","from flask_pymongo import PyMongo, pymongo # for paginate functionality","from bson.objectid import ObjectId","from werkzeug.security import generate_password_hash, check_password_hash  ","from forms import CommentForm, LoginForm # flask wtf from form.py e.g. ReviewForm","from flask_wtf import csrf","","app = Flask(__name__) #dunder ","#app.config['MONGODB_NAME']= os.environ.get('MONGODB_NAME') ","app.config['MONGO_URI'] = os.environ.get('MONGO_URI')","app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY')","","","mongo = PyMongo(app)"]}],[{"start":{"row":11,"column":29},"end":{"row":11,"column":40},"action":"remove","lines":[", LoginForm"],"id":3533}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":70},"action":"remove","lines":["from forms import CommentForm # flask wtf from form.py e.g. ReviewForm"],"id":3534}],[{"start":{"row":11,"column":0},"end":{"row":12,"column":26},"action":"remove","lines":["","from flask_wtf import csrf"],"id":3535}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":40},"action":"insert","lines":["from forms import CommentForm, LoginForm"],"id":3536}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":1},"action":"insert","lines":["#"],"id":3540}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":1},"action":"remove","lines":["#"],"id":3541}],[{"start":{"row":11,"column":18},"end":{"row":11,"column":30},"action":"remove","lines":["CommentForm,"],"id":3542},{"start":{"row":11,"column":17},"end":{"row":11,"column":18},"action":"remove","lines":[" "]}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":1},"action":"insert","lines":["#"],"id":3543}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":1},"action":"remove","lines":["#"],"id":3544}],[{"start":{"row":11,"column":27},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":3545}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":26},"action":"insert","lines":["from flask_wtf import csrf"],"id":3546}],[{"start":{"row":42,"column":0},"end":{"row":85,"column":3},"action":"remove","lines":["\"\"\"","@app.route('/flask_log', methods=['GET', 'POST'])","def user_reg():","    ","    if current_user.is_authenticated: # models.py ","    ","        flash(\"You're already logged in!\")","        ","        return redirect(url_for('bio')) # add flask-profile","        ","    login_form = LoginForm() #forms.py ","    ","    if request.method == 'POST':","        if login_form.validate_on_submit():","             ","            user  = mongo.db.users.find_one({\"username\": login_form.username.data})","        ","            if user and User.check_password(user['password'], login_form.password.data):","                ","                login_aim = User(user['username'])","                login_user(login_aim)","                flash(\"You are logged in!\")","                ","                return redirect(url_for('bio'))","                ","            elif user is None:","                flash(\"This username doesn't exist!\", 'error')","                ","            else:","                flash(\"This password is wrong!\", 'error')","            ","            ","            return render_template('flask_login.html', form=login_form)","            ","","@login_manager.user_loader","def load_user(username):","    u = mongo.db.users.find_one({\"username\": username})","    if not u:","        return None","        ","    return User(u['username'])","            ","\"\"\""],"id":3547}],[{"start":{"row":0,"column":0},"end":{"row":563,"column":19},"action":"remove","lines":["import os, datetime, math, re # re is regular extension","import json","from bson.json_util import dumps","from os import path","if path.exists(\"env.py\"):","    import env","#from dotenv import load_dotenv","from flask import Flask, render_template, redirect, request, url_for, session, flash, jsonify","from flask_pymongo import PyMongo, pymongo # for paginate functionality","from bson.objectid import ObjectId","from werkzeug.security import generate_password_hash, check_password_hash  ","from forms import LoginForm","from flask_wtf import csrf","","app = Flask(__name__) #dunder ","#app.config['MONGODB_NAME']= os.environ.get('MONGODB_NAME') ","app.config['MONGO_URI'] = os.environ.get('MONGO_URI')","app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY')","","","mongo = PyMongo(app)","","# MDB Collections","","users_coll = mongo.db.users ","books_coll = mongo.db.books","removed_coll = mongo.db.removed_by","comment_coll = mongo.db.comments","","\"\"\"","@app.route('/<password>')","def index(password):","    ","    #hashed_value = generate_password_hash(password)","    ","    stored_password = 'pbkdf2:sha256:150000$X3UrcT74$cf9a77f6f16f839369159274a32b2d136aea48c94aab1dafcfd56c33cf025e79'","    ","    result = check_password_hash(stored_password, password)","    ","    return str(result) # boolean so need to return string  #hashed_value","    ","\"\"\"","","","@app.route('/')","@app.route('/index')","def index():","    books = mongo.db.books","    return render_template('index.html')","","\"\"\"","@app.route('/get_reviews')","def get_reviews():","    return render_template(\"book_review.html\",","    books=mongo.db.books.find()) ","\"\"\"","    ","    # supply collection here with find method to return book collection from mdb","","","# paginate code has been taken and modifed/adapted from 'ShaneMuir_Alumni' via a Slack Thread ","@app.route('/all_reviews')","def all_reviews():","    ","    \"\"\"","    This route decorator allows users to see a specific amount of the book reivews ","    with the paginate function.","    \"\"\"","    page_limit = 4  # Logic for pagination","    current_page = int(request.args.get('current_page', 1))","    total = mongo.db.books.count()","    pages = range(1, int(math.ceil(total / page_limit)) + 1)","    books = mongo.db.books.find().sort('_id', pymongo.ASCENDING).skip(","        (current_page - 1)*page_limit).limit(page_limit)","            ","    if 'user' in session: ","        _user = books_coll.find_one({\"_id\" : ObjectId(session['user_id'])})","            ","        return render_template('all_reviews.html', books=books,","                               title='Home', current_page=current_page,","                               pages=pages, _user=_user)","    else:","        return render_template('all_reviews.html', books=books,","                               title='Home', current_page=current_page,","                               pages=pages)","    ","","@app.route('/review_page')","def review_page():","    return render_template(\"add_review.html\")","","","## Book Image/Pic Link Function ##","    ## code taken and adapted from fellow coding student MS3 project - https://github.com/JBroks/booksy-reviews","","def book_image(cover_pic):","    if cover_pic == '':","        # if no link provide then implement placeholder","        ","        pic = \"https://via.placeholder.com/468x60?text=No+Image+Available+on+Bukish\"","    ","    else:","        # correct link provided","        if any(re.findall(r'jpeg|jpg|png', cover_pic, re.IGNORECASE)):","            pic = cover_pic","        # incorrect or no link provided ","        else:","            pic = \"https://via.placeholder.com/468x60?text=No+Image+Available+on+Bukish\"","            ","    return pic ","","## Amazon Link for add_review section ","    ## code taken and adapted from fellow coding student MS3 project - https://github.com/JBroks/booksy-reviews","    ","def open_amazon_link(book_title, book_author, amazon_url):","    ","    if amazon_url == '':","        amazon_route = 'https://www.amazon.co.uk/s?k='","        amazon_add = amazon_route + book_title.replace(' ', '+')+ '+' + book_author.replace(' ', '+')","        amazon_tag = amazon_add.replace('&', 'and') + '&tag=neils'","    ","    elif (amazon_url.find('&tag=neils') >=0 ):","        ","        amazon_tag = amazon_url","    ","    else: ","        if any(re.findall(r'ref|keywords|k=', amazon_url, re.IGNORECASE )):","            ","            amazon_tag = amazon_url +'&tag=neils'","            ","        elif amazon_url.endswith('/'):","            ","            amazon_tag = amazon_url +'&tag=neils'","            ","        else:","            ","            amazon_tag = amazon_url +'/&tag=neils'","        ","    return amazon_tag","        ","","","@app.route('/add_review', methods=['POST'] )","def add_review():","    books=mongo.db.books","    ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    # amazon link ","    title = request.form['book_title']","    writer = request.form['book_author']","    amazon_line = request.form['amazon']","    buy_amazon = open_amazon_link(title, writer, amazon_line)","    ","    ","    pic = book_image(request.form.get('pic'))","    books.insert_one({","        'book_title' : request.form.get('book_title'),","        'book_author' : request.form.get('book_author'),","        'category_name' : request.form.get('category_name'),","        'pic' : pic,","        'amazon' : buy_amazon, ","        'summary' : request.form.get('summary'),","        'stars' : request.form.get('stars'),","        'date' : datetime.datetime.utcnow(), #get the time and date in mdb","        'is_available' : request.form.get('is_available'),","        'added_by' : _user","           # {'_id': ObjectId(session['user_id'])} ","        })","    return redirect(url_for('all_reviews'))","","","","# DELETE BOOK REVIEW","","@app.route('/delete_review/<book_id>' )","def delete_review(book_id):","    ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","        ","    mongo.db.books.remove({'_id': ObjectId(book_id)})","","    return redirect(url_for('all_reviews'))","    ","# EDIT (USERS) REVIEW ","","@app.route('/adapt_review/<book_id>')","def adapt_review(book_id):","    ","    individual_book = mongo.db.books.find_one({'_id': ObjectId(book_id)}) ","    ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","        ","    return render_template('adapt_review.html', book=individual_book) #for jinja temps","","","@app.route('/edit_review/<book_id>', methods=['POST'])","def edit_review(book_id):","    ","    #adapt_book = mongo.db.books.find_one({'_id': ObjectId(book_id)})","    ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    #generate and retrieve review details from mdb ","    title = request.form['book_title']","    writer = request.form['book_author']","    amazon_line = request.form['amazon']","    buy_amazon = open_amazon_link(title, writer, amazon_line)","    ","    #print(request.form)","    pic = book_image(request.form.get('pic'))","    ","    mongo.db.books.update({'_id': ObjectId(book_id)},","    { '$set':","        { ","        'book_title' : request.form.get('book_title'), #.get ","        'book_author' : request.form.get('book_author'),","        'category_name' : request.form.get('category_name'),","        'pic' : pic,","        'amazon' : buy_amazon, ","        'summary' : request.form.get('summary'),","        'stars' : request.form.get('stars'),","        #'modified_at' : datetime.datetime.utcnow(), #get the time and date in mdb","        #'is_available' : request.form['is_available'],","        'added_by' : _user #ObjectId(session['user_id']) ObjectId(book_id)","        }","        ","    })","        ","    return redirect(url_for('individual_reviews', book_id=book_id))","    ","    ","# COMMENT FORM SECTION #","","# display comment form with wtf ","","# form = CommentForm(request.form)","","@app.route('/all_comments')","def all_comments():","    #comments=mongo.db.comments","    #return render_template(\"all_comments.html\", comments=comments)","    ","    form = CommentForm()","    ","    page_limit = 4  # Logic for pagination","    current_page = int(request.args.get('current_page', 1))","    total = mongo.db.comments.count()","    pages = range(1, int(math.ceil(total / page_limit)) + 1)","    comments = mongo.db.comments.find().sort('_id', pymongo.ASCENDING).skip(","        (current_page - 1)*page_limit).limit(page_limit)","            ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","            ","        return render_template('all_comments.html', comments=comments,","                               title='Home', current_page=current_page,","                               pages=pages, user=_user, form=form)","    else:","        return render_template('all_comments.html', comments=comments,","                               title='Home', current_page=current_page,","                               pages=pages, form=form)","","# Get Comment Form #","    ","@app.route('/comment_page')","def comment_page():","    form = CommentForm()","    #books=mongo.db.books","    #comments=mongo.db.comments","    return render_template(\"comment_form.html\", form=form)","    ","    ","@app.route('/comment_form', methods=('GET', 'POST'))","def comment_form():","    ","    form = CommentForm()","    ","   # book_name = request.form['book_title']","   # books = books_coll.find_one({\"book_title\": book_name })","    ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    if form.validate_on_submit(): # if form is submitted comments are added to DB","        comments=mongo.db.comments","        comments.insert_one({","           # 'book_title' : books,","            'book_hook' : request.form.get('book_hook'),","            'user_comments' : request.form.get('user_comments'),","            'added_by' : _user","                # {'_id': ObjectId(session['user_id'])} ","                })","        flash('COMMENT ADDED!')","        return redirect(url_for('all_comments', user=_user, form=form))","    return render_template('comment_form.html', user=_user, form=form, books=mongo.db.books.find())","","","# INDIVIDUAL BOOK REVIEW SECTION ","","@app.route('/individual_reviews/<book_id>')","def individual_reviews(book_id):","    ","    #book id url to match objectid ","    ","    individual_book = mongo.db.books.find_one({'_id': ObjectId(book_id)}) ","    ","    # show comments underneath individual book, new coll bookcomms","    ","    individ_comments = mongo.db.bookscomms.find({ ","       \"book_id\": ObjectId(book_id) }).sort([(\"_id\", -1)])","    ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    return render_template('individual_book.html', book=individual_book, book_id=book_id, user=_user, incomments=individ_comments)    ","","","## ADD COMMENTS UNDERNEATH INDIVIDUAL REVIEWS ##","","@app.route('/add_individual/<book_id>', methods=['POST', 'GET'])","def add_individual(book_id):","    ","    book_comments = mongo.db.bookscomms","    ","    if 'user_id' in session:   ","            _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    individual_book = mongo.db.books.find_one({'_id': ObjectId(book_id)})","    ","    #bookcom = request.form['individual']","    book_comments.insert_one({","        'individual' : request.form['individual'],","        'book_id': ObjectId(book_id), # if it's individual_book - it adds the details to the mdb","        'added_by' : _user","        })","    flash('your comment has been added')","    return redirect(url_for('individual_reviews',    ","                            book_id=book_id, ","                            user=_user))","                          ","## DELETES INDIVIDUAL COMMENT ## ","","@app.route('/delete_individual/<book_id>/<indivd_id>')","def delete_individual(indivd_id, book_id ):","    ","    if 'user_id' in session:   ","            _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    indivd = mongo.db.bookscomms.find_one({'_id': ObjectId(book_id)})","    ","    mongo.db.bookscomms.remove({'_id': ObjectId(indivd_id)})","    ","    return redirect(url_for('individual_reviews', indivd_id=indivd_id,","                    book_id=book_id, user=_user))  ","","","","## UPDATE INDIVIDUAL USERS COMMENT ##","","@app.route('/update_individual/<book_id>/<indivd_id>', methods=[\"POST\"])","def update_individual(indivd_id, book_id):","    ","    book_comments = mongo.db.bookscomms","   ","    if 'user_id' in session:   ","            _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    indivd = mongo.db.bookscomms.find_one({'_id': ObjectId(book_id)})","    ","    book_comments.update({'_id': ObjectId(indivd_id)}, ","            {'$set': ","               {'individual' : request.form['individual'] } ","            })","    ","    return redirect(url_for('individual_reviews', indivd_id=indivd_id,","                    book_id=book_id, user=_user))  ","    ","\"\"\"","@app.route('/comment_form', methods=('GET', 'POST'))","def comment_form():","    ","    # books=mongo.db.books # for the book selection maybe","    ","    form = CommentForm(request.form) # boot up comment_form ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    #import pdb;pdb.set_trace()","    #csrf.generate_csrf()","    if request.method == 'POST' and form.validate_on_submit(): # if form is submitted comments are added to DB","        comments=mongo.db.comments","        comments.insert_one({","            'book_title' : request.form.get('book_title'),","            'user_comments' : request.form.get('user_comments'),","            'added_by' : {","                '_id': ObjectId(session['user_id'])} ","                })","        flash('COMMENT ADDED!')","        return redirect(url_for('all_comments', form=form)) #adds review formerly - all_reviews","        ","    return render_template('comment_form.html', form=form,  user=_user)","\"\"\"","","","@app.route('/comments', methods=['GET', 'POST'])","def comments():","    ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","        return render_template('comments.html', user=_user, books=mongo.db.books.find())","        ","","","\"\"\"","@app.route('/delete_book/<book_id>')","def delete_book(book_id):","    mongo.db.books.remove({\"_id\": ObjectId('book_title')})","    return redirect(url_for('bio'))","","\"\"\"","","","@app.route('/login', methods=['GET'])","def login():","    if 'user' in session: #session id from Flask stored as cookie","        _user = users_coll.find_one({\"_id\" : ObjectId(session['user_id'])})","        if _user:","            flash(\"you're already logged in!\")  ","            return redirect(url_for('bio')) #get_reviews formerly ","    else:","        return render_template('login.html')","        ","        ","","@app.route('/user_login', methods=['POST'])","def user_login():","    form = request.form.to_dict()","    _user = users_coll.find_one({\"username\" : form['username']}) # user","    ","    # to see if the user in in the mdb","    if _user:","        ","        # werkzeug checking hash(stored) with real passwd","        if check_password_hash(_user['password'], form['user_password']):","            _dump = dumps(_user['_id']) ","            _dump = json.loads(_dump)","            #import pdb; pdb.set_trace() # used to trace the source of the json error","            session['user_id'] = _dump['$oid']","            ","            #  redirect to admin section ","            # import pdb; pdb.set_trace() #### ","            if _user['username'] == \"admin\":","                    return redirect(url_for('admin'))","            else:","                flash(\"welcome back!\")","                return redirect(url_for('bio')) #get_reviews formerly ","        else:","             flash(\"password or username is incorrect\")","             return redirect(url_for('login'))","    else:","        flash(\"You gotta sign up !\")","        return redirect(url_for('signup'))","","","","@app.route('/signup', methods=['GET', 'POST'])","def signup():","\t","\tif 'user' in session:","\t\tflash(\"you're already signed in !!\")","\t\treturn redirect(url_for('get_reviews'))","\t\t","\tif request.method == 'POST':","\t\tform = request.form.to_dict()","\t\t ","\t\tif form['user_password'] == form['confirm_password']: # need to insert a popup saying 'confirm pw'","\t\t\t","\t\t\tuser = users_coll.find_one({\"username\" : form['username']})","\t\t\tif user:","\t\t\t\tflash(f\"{form['username']} already exists!\")","\t\t\t\treturn redirect(url_for('signup'))","\t\t\t","\t\t\telse:\t","\t\t\t    ","\t\t\t\t# werkzeug generatre password hash","\t\t\t\t","\t\t\t\thash_pass = generate_password_hash(form['user_password'])","\t\t\t\t","\t\t\t\t# next step is create a new user bio","\t\t\t\tusers_coll.insert_one(","\t\t\t\t\t{","\t\t\t\t\t\t'username': form['username'],","\t\t\t\t\t\t'email': form['email'],","\t\t\t\t\t\t'password': hash_pass","\t\t\t\t\t}","\t\t\t\t)","\t\t\t\t","\t\t\t\t# this section is to ensure that the user is recorded in the db","\t\t\t\t","\t\t\t\t_user = users_coll.find_one(","\t\t\t\t    {\"username\": form['username']})","\t\t\t\tif _user:","\t\t\t\t   _dump = dumps(_user['_id']) ","\t\t\t\t   _dump = json.loads(_dump)","\t\t\t\t   session['user_id'] = _dump['$oid']","\t\t\t\t   return redirect(url_for('bio'))","\t\t\t\t   ","\t\t\t\t   ","\t\t\t\t   \"\"\"","\t\t\t\tuser_db = users_coll.find_one(","\t\t\t\t    {\"username\": form['username']})","\t\t\t\tif user_db:","\t\t\t\t\tsession['user'] = user_db['username']","\t\t\t\t\treturn redirect(url_for('bio', user=user_db['username']))","\t\t\t\t\t\"\"\"","\t\t\t\t\t","\t\t\t\telse:","\t\t\t\t\tflash(\"There was a problem saving your profile\")","\t\t\t\t\treturn redirect(url_for('signup'))","","\t\telse:","\t\t\tflash(\"Passwords dont match!\")","\t\t\treturn redirect(url_for('signup'))","\t\t","\treturn render_template(\"signup.html\")","\t","","@app.route('/logout')","def logout():","    session.clear()","    flash(\"you're logged out !\")","    return render_template('index.html')","","","@app.route('/admin')","def admin():","    if session['user_id'] == \"admin\":","        return render_template('admin.html')  ","    else:","        flash(\"restricted area!\")","        return render_template('index.html')","","","@app.route('/bio')","def bio():","    # if if block checks if the user is signed in","    if 'user_id' in session:   ","        # and if they are, it returns the template ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","        return render_template('bio.html', user=_user) #remove sending pw, create new dict e.g. new user. Remove key from dict in py","    else:","        flash('you have to log in!')","        return render_template('index.html')","","","if __name__ == '__main__': ","    app.run(host=os.environ.get('IP'),","        port=int(os.environ.get('PORT')),","        debug=True)"],"id":3548},{"start":{"row":0,"column":0},"end":{"row":561,"column":19},"action":"insert","lines":["import os, datetime, math, re # re is regular extension","import json","from bson.json_util import dumps","from os import path","if path.exists(\"env.py\"):","    import env","#from dotenv import load_dotenv","from flask import Flask, render_template, redirect, request, url_for, session, flash, jsonify","from flask_pymongo import PyMongo, pymongo # for paginate functionality","from bson.objectid import ObjectId","from werkzeug.security import generate_password_hash, check_password_hash  ","from forms import CommentForm, LoginForm # flask wtf from form.py e.g. ReviewForm","from flask_wtf import csrf","","app = Flask(__name__) #dunder ","#app.config['MONGODB_NAME']= os.environ.get('MONGODB_NAME') ","app.config['MONGO_URI'] = os.environ.get('MONGO_URI')","app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY')","","","mongo = PyMongo(app)","","# MDB Collections","","users_coll = mongo.db.users ","books_coll = mongo.db.books","removed_coll = mongo.db.removed_by","comment_coll = mongo.db.comments","","\"\"\"","@app.route('/<password>')","def index(password):","    ","    #hashed_value = generate_password_hash(password)","    ","    stored_password = 'pbkdf2:sha256:150000$X3UrcT74$cf9a77f6f16f839369159274a32b2d136aea48c94aab1dafcfd56c33cf025e79'","    ","    result = check_password_hash(stored_password, password)","    ","    return str(result) # boolean so need to return string  #hashed_value","    ","\"\"\"","","@app.route('/')","@app.route('/index')","def index():","    books = mongo.db.books","    return render_template('index.html')","","\"\"\"","@app.route('/get_reviews')","def get_reviews():","    return render_template(\"book_review.html\",","    books=mongo.db.books.find()) ","\"\"\"","    ","    # supply collection here with find method to return book collection from mdb","","","# paginate code has been taken and modifed/adapted from 'ShaneMuir_Alumni' via a Slack Thread ","@app.route('/all_reviews')","def all_reviews():","    ","    \"\"\"","    This route decorator allows users to see a specific amount of the book reivews ","    with the paginate function.","    \"\"\"","    page_limit = 4  # Logic for pagination","    current_page = int(request.args.get('current_page', 1))","    total = mongo.db.books.count()","    pages = range(1, int(math.ceil(total / page_limit)) + 1)","    books = mongo.db.books.find().sort('_id', pymongo.ASCENDING).skip(","        (current_page - 1)*page_limit).limit(page_limit)","            ","    if 'user' in session: ","        _user = books_coll.find_one({\"_id\" : ObjectId(session['user_id'])})","            ","        return render_template('all_reviews.html', books=books,","                               title='Home', current_page=current_page,","                               pages=pages, _user=_user)","    else:","        return render_template('all_reviews.html', books=books,","                               title='Home', current_page=current_page,","                               pages=pages)","    ","","@app.route('/review_page')","def review_page():","    return render_template(\"add_review.html\")","","","## Book Image/Pic Link Function ##","    ## code taken and adapted from fellow coding student MS3 project - https://github.com/JBroks/booksy-reviews","","def book_image(cover_pic):","    if cover_pic == '':","        # if no link provide then implement placeholder","        ","        pic = \"https://via.placeholder.com/468x60?text=No+Image+Available+on+Bukish\"","    ","    else:","        # correct link provided","        if any(re.findall(r'jpeg|jpg|png', cover_pic, re.IGNORECASE)):","            pic = cover_pic","        # incorrect or no link provided ","        else:","            pic = \"https://via.placeholder.com/468x60?text=No+Image+Available+on+Bukish\"","            ","    return pic ","","## Amazon Link for add_review section ","    ## code taken and adapted from fellow coding student MS3 project - https://github.com/JBroks/booksy-reviews","    ","def open_amazon_link(book_title, book_author, amazon_url):","    ","    if amazon_url == '':","        amazon_route = 'https://www.amazon.co.uk/s?k='","        amazon_add = amazon_route + book_title.replace(' ', '+')+ '+' + book_author.replace(' ', '+')","        amazon_tag = amazon_add.replace('&', 'and') + '&tag=neils'","    ","    elif (amazon_url.find('&tag=neils') >=0 ):","        ","        amazon_tag = amazon_url","    ","    else: ","        if any(re.findall(r'ref|keywords|k=', amazon_url, re.IGNORECASE )):","            ","            amazon_tag = amazon_url +'&tag=neils'","            ","        elif amazon_url.endswith('/'):","            ","            amazon_tag = amazon_url +'&tag=neils'","            ","        else:","            ","            amazon_tag = amazon_url +'/&tag=neils'","        ","    return amazon_tag","        ","","","@app.route('/add_review', methods=['POST'] )","def add_review():","    books=mongo.db.books","    ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    # amazon link ","    title = request.form['book_title']","    writer = request.form['book_author']","    amazon_line = request.form['amazon']","    buy_amazon = open_amazon_link(title, writer, amazon_line)","    ","    ","    pic = book_image(request.form.get('pic'))","    books.insert_one({","        'book_title' : request.form.get('book_title'),","        'book_author' : request.form.get('book_author'),","        'category_name' : request.form.get('category_name'),","        'pic' : pic,","        'amazon' : buy_amazon, ","        'summary' : request.form.get('summary'),","        'stars' : request.form.get('stars'),","        'date' : datetime.datetime.utcnow(), #get the time and date in mdb","        'is_available' : request.form.get('is_available'),","        'added_by' : _user","           # {'_id': ObjectId(session['user_id'])} ","        })","    return redirect(url_for('all_reviews'))","","","","# DELETE BOOK REVIEW","","@app.route('/delete_review/<book_id>' )","def delete_review(book_id):","    ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","        ","    mongo.db.books.remove({'_id': ObjectId(book_id)})","","    return redirect(url_for('all_reviews'))","    ","# EDIT (USERS) REVIEW ","","@app.route('/adapt_review/<book_id>')","def adapt_review(book_id):","    ","    individual_book = mongo.db.books.find_one({'_id': ObjectId(book_id)}) ","    ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","        ","    return render_template('adapt_review.html', book=individual_book) #for jinja temps","","","@app.route('/edit_review/<book_id>', methods=['POST'])","def edit_review(book_id):","    ","    #adapt_book = mongo.db.books.find_one({'_id': ObjectId(book_id)})","    ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    #generate and retrieve review details from mdb ","    title = request.form['book_title']","    writer = request.form['book_author']","    amazon_line = request.form['amazon']","    buy_amazon = open_amazon_link(title, writer, amazon_line)","    ","    #print(request.form)","    pic = book_image(request.form.get('pic'))","    ","    mongo.db.books.update({'_id': ObjectId(book_id)},","    { '$set':","        { ","        'book_title' : request.form.get('book_title'), #.get ","        'book_author' : request.form.get('book_author'),","        'category_name' : request.form.get('category_name'),","        'pic' : pic,","        'amazon' : buy_amazon, ","        'summary' : request.form.get('summary'),","        'stars' : request.form.get('stars'),","        #'modified_at' : datetime.datetime.utcnow(), #get the time and date in mdb","        #'is_available' : request.form['is_available'],","        'added_by' : _user #ObjectId(session['user_id']) ObjectId(book_id)","        }","        ","    })","        ","    return redirect(url_for('individual_reviews', book_id=book_id))","    ","    ","# COMMENT FORM SECTION #","","# display comment form with wtf ","","# form = CommentForm(request.form)","","@app.route('/all_comments')","def all_comments():","    #comments=mongo.db.comments","    #return render_template(\"all_comments.html\", comments=comments)","    ","    form = CommentForm()","    ","    page_limit = 4  # Logic for pagination","    current_page = int(request.args.get('current_page', 1))","    total = mongo.db.comments.count()","    pages = range(1, int(math.ceil(total / page_limit)) + 1)","    comments = mongo.db.comments.find().sort('_id', pymongo.ASCENDING).skip(","        (current_page - 1)*page_limit).limit(page_limit)","            ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","            ","        return render_template('all_comments.html', comments=comments,","                               title='Home', current_page=current_page,","                               pages=pages, user=_user, form=form)","    else:","        return render_template('all_comments.html', comments=comments,","                               title='Home', current_page=current_page,","                               pages=pages, form=form)","","# Get Comment Form #","    ","@app.route('/comment_page')","def comment_page():","    form = CommentForm()","    #books=mongo.db.books","    #comments=mongo.db.comments","    return render_template(\"comment_form.html\", form=form)","    ","    ","@app.route('/comment_form', methods=('GET', 'POST'))","def comment_form():","    ","    form = CommentForm()","    ","   # book_name = request.form['book_title']","   # books = books_coll.find_one({\"book_title\": book_name })","    ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    if form.validate_on_submit(): # if form is submitted comments are added to DB","        comments=mongo.db.comments","        comments.insert_one({","           # 'book_title' : books,","            'book_hook' : request.form.get('book_hook'),","            'user_comments' : request.form.get('user_comments'),","            'added_by' : _user","                # {'_id': ObjectId(session['user_id'])} ","                })","        flash('COMMENT ADDED!')","        return redirect(url_for('all_comments', user=_user, form=form))","    return render_template('comment_form.html', user=_user, form=form, books=mongo.db.books.find())","","","# INDIVIDUAL BOOK REVIEW SECTION ","","@app.route('/individual_reviews/<book_id>')","def individual_reviews(book_id):","    ","    #book id url to match objectid ","    ","    individual_book = mongo.db.books.find_one({'_id': ObjectId(book_id)}) ","    ","    # show comments underneath individual book, new coll bookcomms","    ","    individ_comments = mongo.db.bookscomms.find({ ","       \"book_id\": ObjectId(book_id) }).sort([(\"_id\", -1)])","    ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    return render_template('individual_book.html', book=individual_book, book_id=book_id, user=_user, incomments=individ_comments)    ","","","## ADD COMMENTS UNDERNEATH INDIVIDUAL REVIEWS ##","","@app.route('/add_individual/<book_id>', methods=['POST', 'GET'])","def add_individual(book_id):","    ","    book_comments = mongo.db.bookscomms","    ","    if 'user_id' in session:   ","            _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    individual_book = mongo.db.books.find_one({'_id': ObjectId(book_id)})","    ","    #bookcom = request.form['individual']","    book_comments.insert_one({","        'individual' : request.form['individual'],","        'book_id': ObjectId(book_id), # if it's individual_book - it adds the details to the mdb","        'added_by' : _user","        })","    flash('your comment has been added')","    return redirect(url_for('individual_reviews',    ","                            book_id=book_id, ","                            user=_user))","                          ","## DELETES INDIVIDUAL COMMENT ## ","","@app.route('/delete_individual/<book_id>/<indivd_id>')","def delete_individual(indivd_id, book_id ):","    ","    if 'user_id' in session:   ","            _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    indivd = mongo.db.bookscomms.find_one({'_id': ObjectId(book_id)})","    ","    mongo.db.bookscomms.remove({'_id': ObjectId(indivd_id)})","    ","    return redirect(url_for('individual_reviews', indivd_id=indivd_id,","                    book_id=book_id, user=_user))  ","","","","## UPDATE INDIVIDUAL USERS COMMENT ##","","@app.route('/update_individual/<book_id>/<indivd_id>', methods=[\"POST\"])","def update_individual(indivd_id, book_id):","    ","    book_comments = mongo.db.bookscomms","   ","    if 'user_id' in session:   ","            _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    indivd = mongo.db.bookscomms.find_one({'_id': ObjectId(book_id)})","    ","    book_comments.update({'_id': ObjectId(indivd_id)}, ","            {'$set': ","               {'individual' : request.form['individual'] } ","            })","    ","    return redirect(url_for('individual_reviews', indivd_id=indivd_id,","                    book_id=book_id, user=_user))  ","    ","\"\"\"","@app.route('/comment_form', methods=('GET', 'POST'))","def comment_form():","    ","    # books=mongo.db.books # for the book selection maybe","    ","    form = CommentForm(request.form) # boot up comment_form ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","    ","    #import pdb;pdb.set_trace()","    #csrf.generate_csrf()","    if request.method == 'POST' and form.validate_on_submit(): # if form is submitted comments are added to DB","        comments=mongo.db.comments","        comments.insert_one({","            'book_title' : request.form.get('book_title'),","            'user_comments' : request.form.get('user_comments'),","            'added_by' : {","                '_id': ObjectId(session['user_id'])} ","                })","        flash('COMMENT ADDED!')","        return redirect(url_for('all_comments', form=form)) #adds review formerly - all_reviews","        ","    return render_template('comment_form.html', form=form,  user=_user)","\"\"\"","","","@app.route('/comments', methods=['GET', 'POST'])","def comments():","    ","    if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","        return render_template('comments.html', user=_user, books=mongo.db.books.find())","        ","","","\"\"\"","@app.route('/delete_book/<book_id>')","def delete_book(book_id):","    mongo.db.books.remove({\"_id\": ObjectId('book_title')})","    return redirect(url_for('bio'))","\"\"\"","","","@app.route('/login', methods=['GET'])","def login():","    if 'user' in session: #session id from Flask stored as cookie","        _user = users_coll.find_one({\"_id\" : ObjectId(session['user_id'])})","        if _user:","            flash(\"you're already logged in!\")  ","            return redirect(url_for('bio')) #get_reviews formerly ","    else:","        return render_template('login.html')","        ","        ","","@app.route('/user_login', methods=['POST'])","def user_login():","    form = request.form.to_dict()","    _user = users_coll.find_one({\"username\" : form['username']}) # user","    ","    # to see if the user in in the mdb","    if _user:","        ","        # werkzeug checking hash(stored) with real passwd","        if check_password_hash(_user['password'], form['user_password']):","            _dump = dumps(_user['_id']) ","            _dump = json.loads(_dump)","            #import pdb; pdb.set_trace() # used to trace the source of the json error","            session['user_id'] = _dump['$oid']","            ","            #  redirect to admin section ","            # import pdb; pdb.set_trace() #### ","            if _user['username'] == \"admin\":","                    return redirect(url_for('admin'))","            else:","                flash(\"welcome back!\")","                return redirect(url_for('bio')) #get_reviews formerly ","        else:","             flash(\"password or username is incorrect\")","             return redirect(url_for('login'))","    else:","        flash(\"You gotta sign up !\")","        return redirect(url_for('signup'))","","","","@app.route('/signup', methods=['GET', 'POST'])","def signup():","\t","\tif 'user' in session:","\t\tflash(\"you're already signed in !!\")","\t\treturn redirect(url_for('get_reviews'))","\t\t","\tif request.method == 'POST':","\t\tform = request.form.to_dict()","\t\t ","\t\tif form['user_password'] == form['confirm_password']: # need to insert a popup saying 'confirm pw'","\t\t\t","\t\t\tuser = users_coll.find_one({\"username\" : form['username']})","\t\t\tif user:","\t\t\t\tflash(f\"{form['username']} already exists!\")","\t\t\t\treturn redirect(url_for('signup'))","\t\t\t","\t\t\telse:\t","\t\t\t    ","\t\t\t\t# werkzeug generatre password hash","\t\t\t\t","\t\t\t\thash_pass = generate_password_hash(form['user_password'])","\t\t\t\t","\t\t\t\t# next step is create a new user bio","\t\t\t\tusers_coll.insert_one(","\t\t\t\t\t{","\t\t\t\t\t\t'username': form['username'],","\t\t\t\t\t\t'email': form['email'],","\t\t\t\t\t\t'password': hash_pass","\t\t\t\t\t}","\t\t\t\t)","\t\t\t\t","\t\t\t\t# this section is to ensure that the user is recorded in the db","\t\t\t\t","\t\t\t\t_user = users_coll.find_one(","\t\t\t\t    {\"username\": form['username']})","\t\t\t\tif _user:","\t\t\t\t   _dump = dumps(_user['_id']) ","\t\t\t\t   _dump = json.loads(_dump)","\t\t\t\t   session['user_id'] = _dump['$oid']","\t\t\t\t   return redirect(url_for('bio'))","\t\t\t\t   ","\t\t\t\t   ","\t\t\t\t   \"\"\"","\t\t\t\tuser_db = users_coll.find_one(","\t\t\t\t    {\"username\": form['username']})","\t\t\t\tif user_db:","\t\t\t\t\tsession['user'] = user_db['username']","\t\t\t\t\treturn redirect(url_for('bio', user=user_db['username']))","\t\t\t\t\t\"\"\"","\t\t\t\t\t","\t\t\t\telse:","\t\t\t\t\tflash(\"There was a problem saving your profile\")","\t\t\t\t\treturn redirect(url_for('signup'))","","\t\telse:","\t\t\tflash(\"Passwords dont match!\")","\t\t\treturn redirect(url_for('signup'))","\t\t","\treturn render_template(\"signup.html\")","\t","","@app.route('/logout')","def logout():","    session.clear()","    flash(\"you're logged out !\")","    return render_template('index.html')","","","@app.route('/admin')","def admin():","    if session['user_id'] == \"admin\":","        return render_template('admin.html')  ","    else:","        flash(\"restricted area!\")","        return render_template('index.html')","","","@app.route('/bio')","def bio():","    # if if block checks if the user is signed in","    if 'user_id' in session:   ","        # and if they are, it returns the template ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","        return render_template('bio.html', user=_user) #remove sending pw, create new dict e.g. new user. Remove key from dict in py","    else:","        flash('you have to log in!')","        return render_template('index.html')","","","if __name__ == '__main__': ","    app.run(host=os.environ.get('IP'),","        port=int(os.environ.get('PORT')),","        debug=True)"]}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":1},"action":"insert","lines":["#"],"id":3549}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":1},"action":"insert","lines":["#"],"id":3550}],[{"start":{"row":11,"column":42},"end":{"row":11,"column":82},"action":"remove","lines":["# flask wtf from form.py e.g. ReviewForm"],"id":3553}],[{"start":{"row":11,"column":0},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":3556}],[{"start":{"row":512,"column":4},"end":{"row":518,"column":8},"action":"remove","lines":["   \"\"\"","\t\t\t\tuser_db = users_coll.find_one(","\t\t\t\t    {\"username\": form['username']})","\t\t\t\tif user_db:","\t\t\t\t\tsession['user'] = user_db['username']","\t\t\t\t\treturn redirect(url_for('bio', user=user_db['username']))","\t\t\t\t\t\"\"\""],"id":3560}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":1},"action":"remove","lines":["#"],"id":3561},{"start":{"row":11,"column":0},"end":{"row":12,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":1},"action":"remove","lines":["#"],"id":3562}],[{"start":{"row":11,"column":29},"end":{"row":11,"column":40},"action":"remove","lines":[", LoginForm"],"id":3563}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":1},"action":"insert","lines":["#"],"id":3564}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":1},"action":"insert","lines":["#"],"id":3565}],[{"start":{"row":18,"column":0},"end":{"row":28,"column":0},"action":"remove","lines":["","","mongo = PyMongo(app)","","# MDB Collections","","users_coll = mongo.db.users ","books_coll = mongo.db.books","removed_coll = mongo.db.removed_by","comment_coll = mongo.db.comments",""],"id":3566}],[{"start":{"row":11,"column":30},"end":{"row":11,"column":31},"action":"remove","lines":[" "],"id":3567}],[{"start":{"row":11,"column":30},"end":{"row":11,"column":31},"action":"insert","lines":[","],"id":3568}],[{"start":{"row":11,"column":31},"end":{"row":11,"column":32},"action":"insert","lines":[" "],"id":3569},{"start":{"row":11,"column":32},"end":{"row":11,"column":33},"action":"insert","lines":["L"]},{"start":{"row":11,"column":33},"end":{"row":11,"column":34},"action":"insert","lines":["o"]},{"start":{"row":11,"column":34},"end":{"row":11,"column":35},"action":"insert","lines":["g"]},{"start":{"row":11,"column":35},"end":{"row":11,"column":36},"action":"insert","lines":["i"]},{"start":{"row":11,"column":36},"end":{"row":11,"column":37},"action":"insert","lines":["n"]}],[{"start":{"row":11,"column":37},"end":{"row":11,"column":38},"action":"insert","lines":["F"],"id":3570},{"start":{"row":11,"column":38},"end":{"row":11,"column":39},"action":"insert","lines":["o"]},{"start":{"row":11,"column":39},"end":{"row":11,"column":40},"action":"insert","lines":["r"]},{"start":{"row":11,"column":40},"end":{"row":11,"column":41},"action":"insert","lines":["m"]}],[{"start":{"row":18,"column":0},"end":{"row":19,"column":0},"action":"insert","lines":["",""],"id":3571},{"start":{"row":19,"column":0},"end":{"row":20,"column":0},"action":"insert","lines":["",""]},{"start":{"row":20,"column":0},"end":{"row":21,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":19,"column":0},"end":{"row":26,"column":32},"action":"insert","lines":["mongo = PyMongo(app)","","# MDB Collections","","users_coll = mongo.db.users ","books_coll = mongo.db.books","removed_coll = mongo.db.removed_by","comment_coll = mongo.db.comments"],"id":3572}],[{"start":{"row":527,"column":18},"end":{"row":527,"column":19},"action":"insert","lines":["n"],"id":3573},{"start":{"row":527,"column":19},"end":{"row":527,"column":20},"action":"insert","lines":["o"]},{"start":{"row":527,"column":20},"end":{"row":527,"column":21},"action":"insert","lines":["t"]}],[{"start":{"row":527,"column":21},"end":{"row":527,"column":22},"action":"insert","lines":[" "],"id":3574}],[{"start":{"row":527,"column":29},"end":{"row":527,"column":32},"action":"remove","lines":["out"],"id":3575},{"start":{"row":527,"column":29},"end":{"row":527,"column":30},"action":"insert","lines":["i"]},{"start":{"row":527,"column":30},"end":{"row":527,"column":31},"action":"insert","lines":["n"]}],[{"start":{"row":527,"column":11},"end":{"row":527,"column":12},"action":"remove","lines":["y"],"id":3576},{"start":{"row":527,"column":11},"end":{"row":527,"column":12},"action":"insert","lines":["Y"]}],[{"start":{"row":527,"column":18},"end":{"row":527,"column":19},"action":"insert","lines":["c"],"id":3577},{"start":{"row":527,"column":19},"end":{"row":527,"column":20},"action":"insert","lines":["u"]},{"start":{"row":527,"column":20},"end":{"row":527,"column":21},"action":"insert","lines":["r"]},{"start":{"row":527,"column":21},"end":{"row":527,"column":22},"action":"insert","lines":["r"]},{"start":{"row":527,"column":22},"end":{"row":527,"column":23},"action":"insert","lines":["e"]},{"start":{"row":527,"column":23},"end":{"row":527,"column":24},"action":"insert","lines":["n"]},{"start":{"row":527,"column":24},"end":{"row":527,"column":25},"action":"insert","lines":["t"]},{"start":{"row":527,"column":25},"end":{"row":527,"column":26},"action":"insert","lines":["l"]},{"start":{"row":527,"column":26},"end":{"row":527,"column":27},"action":"insert","lines":["y"]}],[{"start":{"row":527,"column":27},"end":{"row":527,"column":28},"action":"insert","lines":[" "],"id":3578}],[{"start":{"row":527,"column":42},"end":{"row":527,"column":43},"action":"remove","lines":["!"],"id":3579},{"start":{"row":527,"column":41},"end":{"row":527,"column":42},"action":"remove","lines":[" "]}],[{"start":{"row":527,"column":18},"end":{"row":527,"column":19},"action":"remove","lines":["c"],"id":3580},{"start":{"row":527,"column":18},"end":{"row":527,"column":19},"action":"insert","lines":["C"]}],[{"start":{"row":527,"column":28},"end":{"row":527,"column":29},"action":"remove","lines":["n"],"id":3581},{"start":{"row":527,"column":28},"end":{"row":527,"column":29},"action":"insert","lines":["N"]}],[{"start":{"row":527,"column":32},"end":{"row":527,"column":33},"action":"remove","lines":["l"],"id":3582},{"start":{"row":527,"column":32},"end":{"row":527,"column":33},"action":"insert","lines":["L"]}],[{"start":{"row":527,"column":39},"end":{"row":527,"column":40},"action":"remove","lines":["i"],"id":3583},{"start":{"row":527,"column":39},"end":{"row":527,"column":40},"action":"insert","lines":["I"]}],[{"start":{"row":11,"column":32},"end":{"row":11,"column":41},"action":"remove","lines":["LoginForm"],"id":3584},{"start":{"row":11,"column":31},"end":{"row":11,"column":32},"action":"remove","lines":[" "]},{"start":{"row":11,"column":30},"end":{"row":11,"column":31},"action":"remove","lines":[","]}],[{"start":{"row":11,"column":30},"end":{"row":11,"column":31},"action":"insert","lines":[" "],"id":3585}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":1},"action":"remove","lines":["#"],"id":3586}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":1},"action":"remove","lines":["#"],"id":3587}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":1},"action":"insert","lines":["#"],"id":3588}],[{"start":{"row":46,"column":26},"end":{"row":47,"column":0},"action":"insert","lines":["",""],"id":3589},{"start":{"row":47,"column":0},"end":{"row":47,"column":4},"action":"insert","lines":["    "]},{"start":{"row":47,"column":4},"end":{"row":48,"column":0},"action":"insert","lines":["",""]},{"start":{"row":48,"column":0},"end":{"row":48,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":47,"column":4},"end":{"row":48,"column":0},"action":"insert","lines":["",""],"id":3590},{"start":{"row":48,"column":0},"end":{"row":48,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":48,"column":4},"end":{"row":49,"column":74},"action":"insert","lines":["if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})"],"id":3591}],[{"start":{"row":51,"column":39},"end":{"row":51,"column":40},"action":"insert","lines":[","],"id":3592}],[{"start":{"row":51,"column":40},"end":{"row":51,"column":41},"action":"insert","lines":[" "],"id":3593},{"start":{"row":51,"column":41},"end":{"row":51,"column":42},"action":"insert","lines":["u"]},{"start":{"row":51,"column":42},"end":{"row":51,"column":43},"action":"insert","lines":["s"]},{"start":{"row":51,"column":43},"end":{"row":51,"column":44},"action":"insert","lines":["e"]},{"start":{"row":51,"column":44},"end":{"row":51,"column":45},"action":"insert","lines":["r"]},{"start":{"row":51,"column":45},"end":{"row":51,"column":46},"action":"insert","lines":["="]}],[{"start":{"row":51,"column":46},"end":{"row":51,"column":47},"action":"insert","lines":["_"],"id":3594},{"start":{"row":51,"column":47},"end":{"row":51,"column":48},"action":"insert","lines":["u"]},{"start":{"row":51,"column":48},"end":{"row":51,"column":49},"action":"insert","lines":["s"]},{"start":{"row":51,"column":49},"end":{"row":51,"column":50},"action":"insert","lines":["e"]},{"start":{"row":51,"column":50},"end":{"row":51,"column":51},"action":"insert","lines":["r"]}],[{"start":{"row":91,"column":18},"end":{"row":92,"column":0},"action":"insert","lines":["",""],"id":3597},{"start":{"row":92,"column":0},"end":{"row":92,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":92,"column":4},"end":{"row":95,"column":54},"action":"insert","lines":["if 'user_id' in session:   ","        # and if they are, it returns the template ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})","        return render_template('bio.html', user=_user)"],"id":3598}],[{"start":{"row":93,"column":8},"end":{"row":93,"column":51},"action":"remove","lines":["# and if they are, it returns the template "],"id":3599},{"start":{"row":93,"column":4},"end":{"row":93,"column":8},"action":"remove","lines":["    "]},{"start":{"row":93,"column":0},"end":{"row":93,"column":4},"action":"remove","lines":["    "]},{"start":{"row":92,"column":31},"end":{"row":93,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":94,"column":41},"end":{"row":94,"column":53},"action":"remove","lines":[", user=_user"],"id":3600}],[{"start":{"row":95,"column":44},"end":{"row":95,"column":56},"action":"insert","lines":[", user=_user"],"id":3601}],[{"start":{"row":94,"column":8},"end":{"row":94,"column":42},"action":"remove","lines":["return render_template('bio.html')"],"id":3602},{"start":{"row":94,"column":4},"end":{"row":94,"column":8},"action":"remove","lines":["    "]},{"start":{"row":94,"column":0},"end":{"row":94,"column":4},"action":"remove","lines":["    "]},{"start":{"row":93,"column":74},"end":{"row":94,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":94,"column":4},"end":{"row":94,"column":8},"action":"insert","lines":["    "],"id":3603}],[{"start":{"row":94,"column":61},"end":{"row":95,"column":0},"action":"insert","lines":["",""],"id":3604},{"start":{"row":95,"column":0},"end":{"row":95,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":95,"column":4},"end":{"row":95,"column":8},"action":"remove","lines":["    "],"id":3605}],[{"start":{"row":95,"column":4},"end":{"row":97,"column":44},"action":"insert","lines":["else:","        flash('you have to log in!')","        return render_template('index.html')"],"id":3606}],[{"start":{"row":96,"column":26},"end":{"row":96,"column":27},"action":"insert","lines":[" "],"id":3607},{"start":{"row":96,"column":27},"end":{"row":96,"column":28},"action":"insert","lines":["b"]},{"start":{"row":96,"column":28},"end":{"row":96,"column":29},"action":"insert","lines":["e"]}],[{"start":{"row":96,"column":33},"end":{"row":96,"column":34},"action":"insert","lines":["e"],"id":3608},{"start":{"row":96,"column":34},"end":{"row":96,"column":35},"action":"insert","lines":["e"]},{"start":{"row":96,"column":35},"end":{"row":96,"column":36},"action":"insert","lines":["d"]}],[{"start":{"row":96,"column":39},"end":{"row":96,"column":40},"action":"insert","lines":[" "],"id":3609},{"start":{"row":96,"column":40},"end":{"row":96,"column":41},"action":"insert","lines":["t"]},{"start":{"row":96,"column":41},"end":{"row":96,"column":42},"action":"insert","lines":["o"]}],[{"start":{"row":96,"column":42},"end":{"row":96,"column":43},"action":"insert","lines":[" "],"id":3610},{"start":{"row":96,"column":43},"end":{"row":96,"column":44},"action":"insert","lines":["a"]},{"start":{"row":96,"column":44},"end":{"row":96,"column":45},"action":"insert","lines":["c"]},{"start":{"row":96,"column":45},"end":{"row":96,"column":46},"action":"insert","lines":["c"]},{"start":{"row":96,"column":46},"end":{"row":96,"column":47},"action":"insert","lines":["e"]},{"start":{"row":96,"column":47},"end":{"row":96,"column":48},"action":"insert","lines":["s"]},{"start":{"row":96,"column":48},"end":{"row":96,"column":49},"action":"insert","lines":["s"]}],[{"start":{"row":96,"column":49},"end":{"row":96,"column":50},"action":"insert","lines":[" "],"id":3611},{"start":{"row":96,"column":50},"end":{"row":96,"column":51},"action":"insert","lines":["t"]},{"start":{"row":96,"column":51},"end":{"row":96,"column":52},"action":"insert","lines":["h"]},{"start":{"row":96,"column":52},"end":{"row":96,"column":53},"action":"insert","lines":["i"]},{"start":{"row":96,"column":53},"end":{"row":96,"column":54},"action":"insert","lines":["s"]}],[{"start":{"row":96,"column":54},"end":{"row":96,"column":55},"action":"insert","lines":[" "],"id":3612},{"start":{"row":96,"column":55},"end":{"row":96,"column":56},"action":"insert","lines":["a"]},{"start":{"row":96,"column":56},"end":{"row":96,"column":57},"action":"insert","lines":["r"]},{"start":{"row":96,"column":57},"end":{"row":96,"column":58},"action":"insert","lines":["e"]},{"start":{"row":96,"column":58},"end":{"row":96,"column":59},"action":"insert","lines":["a"]}],[{"start":{"row":96,"column":15},"end":{"row":96,"column":16},"action":"remove","lines":["y"],"id":3613},{"start":{"row":96,"column":15},"end":{"row":96,"column":16},"action":"insert","lines":["Y"]}],[{"start":{"row":83,"column":44},"end":{"row":83,"column":55},"action":"remove","lines":["_user=_user"],"id":3614},{"start":{"row":83,"column":44},"end":{"row":83,"column":54},"action":"insert","lines":["user=_user"]}],[{"start":{"row":87,"column":42},"end":{"row":87,"column":43},"action":"insert","lines":[","],"id":3615}],[{"start":{"row":87,"column":43},"end":{"row":87,"column":44},"action":"insert","lines":[" "],"id":3616}],[{"start":{"row":87,"column":44},"end":{"row":87,"column":54},"action":"insert","lines":["user=_user"],"id":3617}],[{"start":{"row":84,"column":4},"end":{"row":85,"column":0},"action":"insert","lines":["",""],"id":3618},{"start":{"row":85,"column":0},"end":{"row":85,"column":4},"action":"insert","lines":["    "]},{"start":{"row":85,"column":4},"end":{"row":86,"column":0},"action":"insert","lines":["",""]},{"start":{"row":86,"column":0},"end":{"row":86,"column":4},"action":"insert","lines":["    "]},{"start":{"row":86,"column":4},"end":{"row":87,"column":0},"action":"insert","lines":["",""]},{"start":{"row":87,"column":0},"end":{"row":87,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":85,"column":4},"end":{"row":87,"column":44},"action":"insert","lines":["else:","        flash('You have to be logeed in to access this area!')","        return render_template('index.html')"],"id":3619}],[{"start":{"row":89,"column":3},"end":{"row":89,"column":5},"action":"insert","lines":["\"\""],"id":3620}],[{"start":{"row":89,"column":5},"end":{"row":89,"column":6},"action":"insert","lines":["\""],"id":3621}],[{"start":{"row":89,"column":6},"end":{"row":89,"column":7},"action":"remove","lines":[" "],"id":3622},{"start":{"row":89,"column":6},"end":{"row":90,"column":0},"action":"insert","lines":["",""]},{"start":{"row":90,"column":0},"end":{"row":90,"column":3},"action":"insert","lines":["   "]}],[{"start":{"row":94,"column":4},"end":{"row":94,"column":5},"action":"insert","lines":["\""],"id":3623},{"start":{"row":94,"column":5},"end":{"row":94,"column":6},"action":"insert","lines":["\""]},{"start":{"row":94,"column":6},"end":{"row":94,"column":7},"action":"insert","lines":["\""]}],[{"start":{"row":89,"column":2},"end":{"row":94,"column":7},"action":"remove","lines":[" \"\"\"","   else:","        return render_template('all_reviews.html', books=books,","                               title='Home', current_page=current_page,","                               pages=pages, user=_user)","    \"\"\""],"id":3624}],[{"start":{"row":88,"column":0},"end":{"row":89,"column":1},"action":"remove","lines":["    "," "],"id":3625}],[{"start":{"row":78,"column":4},"end":{"row":79,"column":75},"action":"remove","lines":["if 'user' in session: ","        _user = books_coll.find_one({\"_id\" : ObjectId(session['user_id'])})"],"id":3629},{"start":{"row":78,"column":4},"end":{"row":79,"column":74},"action":"insert","lines":["if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})"]}],[{"start":{"row":86,"column":33},"end":{"row":86,"column":34},"action":"remove","lines":["e"],"id":3630},{"start":{"row":86,"column":33},"end":{"row":86,"column":34},"action":"insert","lines":["g"]}],[{"start":{"row":51,"column":39},"end":{"row":51,"column":51},"action":"remove","lines":[", user=_user"],"id":3631}],[{"start":{"row":48,"column":4},"end":{"row":49,"column":74},"action":"remove","lines":["if 'user_id' in session:   ","        _user = users_coll.find_one({\"_id\": ObjectId(session['user_id'])})"],"id":3633}],[{"start":{"row":47,"column":0},"end":{"row":49,"column":1},"action":"remove","lines":["    ","    "," "],"id":3634}]]},"ace":{"folds":[],"scrolltop":1045.757568359375,"scrollleft":0,"selection":{"start":{"row":69,"column":59},"end":{"row":69,"column":59},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":true,"wrapToView":true},"firstLineState":{"row":57,"state":"start","mode":"ace/mode/python"}},"timestamp":1581615548920,"hash":"d02c4168213233b45971e41cd7d61ba5fd352279"}